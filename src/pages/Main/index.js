import React, {Component} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import {ROUTE_NAMES} from '../Main/routes';
import {Path, Svg, G, Defs, ClipPath} from 'react-native-svg';
import {queryUser} from '../../database/allSchemas';
import {
  View,
  Image,
  ImageBackground,
  TouchableOpacity,
  ListRenderItemInfo,
  Dimensions,
} from 'react-native';
import {Text} from 'react-native-elements';
import {Creators as MainCreators} from '../../store/ducks/main';
import {RFPercentage} from 'react-native-responsive-fontsize';
import styles from './style-main';
import Grid from 'react-native-infinite-scroll-grid';
import axios from 'axios';
import SplashScreen from 'react-native-splash-screen';

const {width: viewportWidth} = Dimensions.get('window');

interface Props {}

interface State {
  token: string;
  loadingMore: boolean;
  refreshing: boolean;
  posts: Post[];
  nextPage: number;
  numColumns: number;
}

interface Post {
  id: number;
  title: string;
  thumbnailUrl: string;
}

class Main extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      isLoading: false,
      loadingMore: false,
      refreshing: false,
      posts: [],
      nextPage: 1,
    };
  }

  onRefresh() {
    console.log('reload');
    this.loadData(true);
  }

  onEndReached() {
    console.log('load more');
    this.loadData(false);
  }

  async fetchPosts(page: number, perPage: number = 10): Promise<[Post]> {
    try {
      const posts = await axios({
        method: 'get',
        params: {
          consumer_key: 'ck_bd09789959d94c7021ec1719df2965d4b0053698',
          consumer_secret: 'cs_66aa5aad77dade62fb399435cff32dca3824ed9a',
          per_page: perPage,
          page: page,
        },
        url:
          'http://10.0.2.2/wordpress/latehome_free/wp-json/estate-api/v1/properties',
        headers: {
          'X-Custom-Header': 'foobar',
          Accept: 'application/json',
        },
      });
      if (posts.data.status !== 200) {
        return [];
      } else {
        console.log('posts.data.collection', posts.data.collection);
        return posts.data.collection;
      }
    } catch (error) {
      console.log('error', error);
      return [];
    }
  }

  renIcon = (item, key) => {
    switch (key) {
      case 'amountrooms':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
      case 'areasize':
        return (
          <Svg
            width={RFPercentage(2.5)}
            height={RFPercentage(2.5)}
            viewBox="0 0 12 12"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M11.4 0H0.6C0.44087 0 0.288258 0.0632141 0.175736 0.175736C0.0632141 0.288258 0 0.44087 0 0.6V11.4C0 11.5591 0.0632141 11.7117 0.175736 11.8243C0.288258 11.9368 0.44087 12 0.6 12H4.2C4.35913 12 4.51174 11.9368 4.62426 11.8243C4.73679 11.7117 4.8 11.5591 4.8 11.4V4.8H11.4C11.5591 4.8 11.7117 4.73679 11.8243 4.62426C11.9368 4.51174 12 4.35913 12 4.2V0.6C12 0.44087 11.9368 0.288258 11.8243 0.175736C11.7117 0.0632141 11.5591 0 11.4 0ZM10.8 3.6H9.6V3C9.6 2.84087 9.53679 2.68826 9.42426 2.57574C9.31174 2.46321 9.15913 2.4 9 2.4C8.84087 2.4 8.68826 2.46321 8.57574 2.57574C8.46321 2.68826 8.4 2.84087 8.4 3V3.6H7.2V3C7.2 2.84087 7.13679 2.68826 7.02426 2.57574C6.91174 2.46321 6.75913 2.4 6.6 2.4C6.44087 2.4 6.28826 2.46321 6.17574 2.57574C6.06321 2.68826 6 2.84087 6 3V3.6H4.8V3C4.8 2.84087 4.73679 2.68826 4.62426 2.57574C4.51174 2.46321 4.35913 2.4 4.2 2.4C4.04087 2.4 3.88826 2.46321 3.77574 2.57574C3.66321 2.68826 3.6 2.84087 3.6 3V3.6H3C2.84087 3.6 2.68826 3.66321 2.57574 3.77574C2.46321 3.88826 2.4 4.04087 2.4 4.2C2.4 4.35913 2.46321 4.51174 2.57574 4.62426C2.68826 4.73679 2.84087 4.8 3 4.8H3.6V6H3C2.84087 6 2.68826 6.06321 2.57574 6.17574C2.46321 6.28826 2.4 6.44087 2.4 6.6C2.4 6.75913 2.46321 6.91174 2.57574 7.02426C2.68826 7.13679 2.84087 7.2 3 7.2H3.6V8.4H3C2.84087 8.4 2.68826 8.46321 2.57574 8.57574C2.46321 8.68826 2.4 8.84087 2.4 9C2.4 9.15913 2.46321 9.31174 2.57574 9.42426C2.68826 9.53679 2.84087 9.6 3 9.6H3.6V10.8H1.2V1.2H10.8V3.6Z"
              fill="#9BA0A6"
            />
          </Svg>
        );
      case 'bathrooms':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 15 12"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M9.9375 12C9.75 12 9.5625 11.9062 9.46875 11.8125C9.375 11.7188 9.28125 11.5312 9.28125 11.3438V11.25H5.25V11.3438C5.25 11.5312 5.15625 11.625 5.0625 11.8125C4.96875 11.9062 4.78125 12 4.59375 12C4.40625 12 4.21875 11.9062 4.125 11.8125C4.03125 11.7188 3.9375 11.5312 3.9375 11.3438V11.0625H3.84375C2.90625 10.7812 2.15625 10.2188 1.59375 9.5625C1.03125 8.90625 0.75 8.0625 0.75 7.21875V6.375H0.65625C0.46875 6.375 0.28125 6.28125 0.1875 6.1875C0.09375 6.09375 0 6 0 5.8125C0 5.625 0.09375 5.53125 0.1875 5.34375C0.28125 5.25 0.46875 5.15625 0.65625 5.15625H0.75V2.71875C0.75 2.15625 0.9375 1.5 1.40625 1.03125C1.78125 0.5625 2.4375 0.1875 3 0.09375C3.28125 0 3.5625 0 3.84375 0C4.21875 0 4.6875 0.09375 5.0625 0.1875C5.625 0.46875 6.09375 0.84375 6.46875 1.40625C7.03125 1.5 7.5 1.78125 7.875 2.0625C8.25 2.4375 8.4375 2.90625 8.4375 3.375V4.6875H3.9375V3.375C3.9375 2.71875 4.3125 2.0625 4.96875 1.6875L5.0625 1.59375H4.875C4.6875 1.40625 4.40625 1.3125 4.03125 1.21875C3.9375 1.21875 3.84375 1.21875 3.75 1.21875C3.5625 1.21875 3.28125 1.21875 3.09375 1.3125C2.8125 1.5 2.625 1.6875 2.4375 1.875C2.25 2.15625 2.15625 2.4375 2.15625 2.71875V5.25H13.7812C13.9687 5.25 14.1562 5.34375 14.25 5.4375C14.3437 5.53125 14.4375 5.71875 14.4375 5.90625C14.4375 6.09375 14.3437 6.1875 14.25 6.375C14.1562 6.46875 13.9687 6.5625 13.7812 6.5625H13.6875V7.3125C13.6875 8.15625 13.4062 9 12.8437 9.65625C12.2812 10.3125 11.5312 10.875 10.5937 11.1562H10.5V11.4375C10.5 11.625 10.4062 11.7188 10.3125 11.9062C10.3125 11.9062 10.125 12 9.9375 12ZM2.15625 7.21875C2.15625 7.96875 2.53125 8.71875 3.09375 9.28125C3.65625 9.84375 4.5 10.125 5.34375 10.125H9.09375C9.9375 10.125 10.7812 9.84375 11.3438 9.28125C11.9062 8.71875 12.2812 7.96875 12.2812 7.21875V6.375H2.15625V7.21875ZM7.03125 3.46875V3.375C7.03125 3.1875 6.9375 3 6.75 2.8125C6.5625 2.71875 6.375 2.625 6.1875 2.625C5.90625 2.625 5.71875 2.71875 5.53125 2.8125C5.34375 3 5.25 3.1875 5.25 3.375V3.46875H7.03125Z"
              fill="#9BA0A6"
            />
          </Svg>
        );
      case 'bedrooms':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
      case 'builtyear':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
      case 'kitchens':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
      case 'livingrooms':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
      case 'orientation':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
      case 'parking':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
      case 'plotsize':
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
      default:
        return (
          <Svg
            width={RFPercentage(2.7)}
            height={RFPercentage(2.7)}
            viewBox="0 0 16 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <Path
              d="M15.2998 12.22C15.1011 12.22 14.9024 12.1207 14.8031 12.0213C14.7037 11.922 14.6044 11.7233 14.6044 11.5246V8.94146H1.49024V11.5246C1.49024 11.7233 1.39089 11.922 1.29154 12.0213C1.1922 12.1207 0.993496 12.22 0.794797 12.22C0.596098 12.22 0.397398 12.1207 0.298049 12.0213C0.0993496 11.8226 0 11.7233 0 11.5246V0.695447C0 0.496748 0.0993496 0.298049 0.198699 0.198699C0.397398 0.0993496 0.496748 0 0.695447 0C0.894146 0 1.09285 0.0993496 1.1922 0.198699C1.29154 0.298049 1.39089 0.496748 1.39089 0.695447V7.45122H8.24602V2.38439C8.24602 2.18569 8.34537 1.98699 8.44471 1.88764C8.54406 1.78829 8.74276 1.68894 8.94146 1.68894H13.6109C14.207 1.68894 14.8031 1.88764 15.2998 2.38439C15.7966 2.88114 15.9953 3.47724 15.9953 4.07333V11.5246C15.9953 11.7233 15.8959 11.922 15.7966 12.0213C15.6972 12.1207 15.4985 12.22 15.2998 12.22ZM9.73626 7.45122H14.6044V4.07333C14.6044 3.87463 14.505 3.57659 14.3063 3.37789C14.1076 3.17919 13.9089 3.07984 13.6109 3.07984H9.73626V7.45122ZM4.86813 6.45772C4.27203 6.45772 3.67593 6.25902 3.17919 5.76228C2.68244 5.26553 2.48374 4.66943 2.48374 4.07333C2.48374 3.57659 2.58309 3.17919 2.88114 2.78179C3.17919 2.28504 3.47724 1.98699 3.97398 1.78829C4.27203 1.68894 4.57008 1.58959 4.86813 1.58959C5.06683 1.58959 5.16618 1.58959 5.36488 1.58959C5.76228 1.78829 6.25902 1.98699 6.55707 2.38439C6.85512 2.78179 7.15317 3.17919 7.25252 3.57659C7.35187 4.07333 7.25252 4.47073 7.15317 4.96748C6.85512 5.36488 6.55707 5.76228 6.15967 6.06033C5.76228 6.25902 5.36488 6.45772 4.86813 6.45772ZM4.86813 3.07984C4.57008 3.07984 4.37138 3.17919 4.17268 3.37789C4.07333 3.57659 3.97398 3.77528 3.97398 4.07333C3.97398 4.27203 3.97398 4.37138 4.07333 4.57008C4.17268 4.76878 4.27203 4.86813 4.47073 4.86813C4.66943 4.96748 4.76878 4.96748 4.86813 4.96748C4.96748 4.96748 4.96748 4.96748 5.06683 4.96748C5.26553 4.96748 5.36488 4.86813 5.56358 4.66943C5.66293 4.57008 5.76228 4.37138 5.86163 4.17268C5.86163 3.97398 5.86163 3.77528 5.76228 3.67594C5.66293 3.47724 5.56358 3.37789 5.36488 3.27854C5.26553 3.17919 5.06683 3.07984 4.86813 3.07984Z"
              fill="#AEB3BA"
            />
          </Svg>
        );
    }
  };
  renName = (item, key) => {
    switch (key) {
      case 'amountrooms':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            amou
          </Text>
        );
      case 'areasize':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            sqft
          </Text>
        );
      case 'bathrooms':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            ba
          </Text>
        );
      case 'bedrooms':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            bds
          </Text>
        );
      case 'builtyear':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            bly
          </Text>
        );
      case 'kitchens':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            kir
          </Text>
        );
      case 'livingrooms':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            liv
          </Text>
        );
      case 'orientation':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            ori
          </Text>
        );
      case 'parking':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            par
          </Text>
        );
      case 'plotsize':
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            plo
          </Text>
        );
      default:
        return (
          <Text
            style={{
              color: '#AEB3BA',
              fontSize: RFPercentage(2.4),
              marginLeft: 4,
            }}>
            {key}
          </Text>
        );
    }
  };

  async loadData(refresh: boolean) {
    if (this.isLoading) {
      return;
    }
    if (refresh) {
      this.setState({refreshing: true});
      this.setState({posts: []});
      try {
        this.isLoading = true;
        const posts = await this.fetchPosts(1);
        this.setState(previousState => {
          return {
            loadingMore: false,
            posts: refresh ? posts : previousState.posts.concat(posts),
            nextPage: 1,
          };
        });
      } catch (error) {
        console.error(error);
      } finally {
        this.isLoading = false;
        this.setState({loadingMore: false, refreshing: false});
      }
    } else {
      this.setState({loadingMore: true});
      try {
        this.isLoading = true;
        const posts = await this.fetchPosts(this.state.nextPage + 1);
        this.setState(previousState => {
          console.log(previousState);
          return {
            loadingMore: false,
            posts: refresh ? posts : previousState.posts.concat(posts),
            nextPage: previousState.nextPage + 1,
          };
        });
      } catch (error) {
        console.error(error);
      } finally {
        this.isLoading = false;
        this.setState({loadingMore: false, refreshing: false});
      }
    }
  }

  renderItem(info: ListRenderItemInfo<Post>) {
    const l = info;
    return (
      <View style={styles.listing}>
        <View
          style={{
            width: '100%',
            height: '55%',
          }}>
          <TouchableOpacity
            onPress={() =>
              this.props.navigation.navigate(ROUTE_NAMES.DETAIL, l)
            }>
            <ImageBackground
              imageStyle={{
                borderTopLeftRadius: 10,
                borderTopRightRadius: 10,
                borderWidth: 1,
                borderColor: '#fff',
              }}
              style={{
                width: '100%',
                height: '100%',
              }}
              source={{
                uri: l.item.thumbnail,
              }}>
              <View style={styles.statust}>
                <View
                  style={{
                    width: '100%',
                    height: '100%',
                    flexDirection: 'row-reverse',
                  }}>
                  <View
                    style={{
                      justifyContent: 'center',
                      alignItems: 'center',
                      width: '12%',
                      height: '12%',
                      backgroundColor: '#fff',
                      paddingTop: 6,
                      paddingBottom: 6,
                      paddingRight: 6,
                      paddingLeft: 6,
                      borderRadius: 50,
                    }}>
                    <Svg
                      width="80%"
                      height="80%"
                      viewBox="0 0 16 15"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg">
                      <Path
                        d="M8 14.1333C7.86667 14.1333 7.73333 14.1333 7.66667 14.0667C4.8 12.6 0 9.46667 0 5C0 2.26667 1.93333 0.0666667 4.4 0.0666667C6.06667 0.0666667 7.26667 0.866667 8 1.53333L8.06667 1.46667C8.8 0.8 9.93333 0 11.6667 0C14.0667 0.0666667 16 2.26667 16 5C16 9.46667 11.2 12.6 8.33333 14.0667C8.26667 14.1333 8.13333 14.1333 8 14.1333ZM4.4 1.53333C2.53333 1.53333 1.53333 3.33333 1.53333 5C1.53333 8.53333 5.6 11.2667 8 12.5333C10.4667 11.2667 14.5333 8.53333 14.5333 5C14.5333 3.33333 13.5333 1.53333 11.6667 1.53333C9.73333 1.53333 8.73333 3 8.66667 3.06667C8.53333 3.26667 8.26667 3.4 8.06667 3.4C7.8 3.4 7.6 3.26667 7.46667 3.06667C6.86667 2.33333 5.73333 1.53333 4.4 1.53333Z"
                        fill="#6923E7"
                      />
                    </Svg>
                  </View>
                </View>
              </View>
            </ImageBackground>
          </TouchableOpacity>
        </View>
        <View
          style={{
            flex: 1,
            height: '45%',
            paddingLeft: 20,
            paddingRight: 20,
          }}>
          <View
            style={{
              position: 'absolute',
              flexDirection: 'row',
              top: -15,
              height: 23,
              left: 20,
              width: viewportWidth,
            }}>
            {l.item.labels.map(item => {
              return (
                <View
                  key={item.term_id}
                  style={{
                    marginRight: 10,
                    backgroundColor: `${item.meta.opalestate_label_lb_bg}`,
                    height: 23,
                    width: 60,
                    justifyContent: 'center',
                    alignItems: 'center',
                    borderRadius: 4,
                  }}>
                  <Text style={{color: '#fff'}}>{item.name}</Text>
                </View>
              );
            })}
          </View>
          <TouchableOpacity
            onPress={() =>
              this.props.navigation.navigate(ROUTE_NAMES.DETAIL, l)
            }>
            <Text
              style={{
                marginTop: 20,
                fontWeight: 'bold',
                fontSize: RFPercentage(2.8),
                color: '#272B2E',
              }}>
              {l.item.address}
            </Text>
          </TouchableOpacity>
          <View style={{flexDirection: 'row'}}>
            <Text style={{color: '#5F6870'}}>House | </Text>
            {l.item.statuses.map(item => {
              return (
                <View
                  key={item.term_id}
                  style={{
                    marginRight: 10,
                    height: 23,
                    width: 60,
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}>
                  <Text style={{color: '#5F6870'}}>{item.name}</Text>
                </View>
              );
            })}
          </View>
          <View style={{flexDirection: 'row', marginTop: 5}}>
            <Text
              style={{
                color: '#6923E7',
                fontWeight: 'bold',
                fontSize: RFPercentage(3.8),
              }}>
              ${l.item.price.replace('&#36;', '')}
            </Text>
            <Text
              style={{
                fontWeight: 'bold',
                fontSize: RFPercentage(2.8),
                color: '#5F6870',
              }}>
              /month
            </Text>
          </View>
          <View
            style={{
              height: 85,
              marginTop: 6,
              flexDirection: 'row',
              flexWrap: 'wrap',
            }}>
            {Object.keys(l.item.short_info).map(key => {
              return (
                <View
                  key={key}
                  style={{
                    paddingRight: 20,
                    marginRight: 15,
                    marginTop: 5,
                    height: RFPercentage(3),
                    flexDirection: 'row',
                  }}>
                  {this.renIcon(l.item.short_info[key], key)}
                  <Text
                    style={{
                      color: '#AEB3BA',
                      fontSize: RFPercentage(2.4),
                      marginLeft: 4,
                    }}>
                    {l.item.short_info[key].value}
                  </Text>
                  {this.renName(l.item.short_info[key], key)}
                </View>
              );
            })}
          </View>
        </View>
      </View>
    );
  }

  componentDidMount(): void {
    SplashScreen.hide();
    queryUser()
      .then(item => {
        const dataUser = Array.from(item);
        console.log('dataUser', dataUser);
        this.setState({token: dataUser[0].token});
        this.loadData(true);
      })
      .catch(error => {
        console.log('error !', error);
      });
  }

  render() {
    const {navigation} = this.props;
    const {mainRequest} = this.props;
    const {loading, error, data} = mainRequest;
    return (
      <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>
        <Grid
          style={{flex: 1, marginTop: 20}}
          key={this.state.numColumns}
          numColumns={this.state.numColumns}
          data={this.state.posts}
          keyExtractor={item => item.id.toString()}
          renderItem={info => this.renderItem(info)}
          onRefresh={() => this.onRefresh()}
          refreshing={this.state.refreshing}
          onEndReached={() => this.onEndReached()}
          loadingMore={this.state.loadingMore}
          marginExternal={10}
          marginInternal={10}
        />
      </View>
    );
  }
}

const mapStateToProps = state => ({
  mainRequest: state.main,
});

const mapDispatchToProps = dispatch =>
  bindActionCreators(MainCreators, dispatch);

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(Main);
